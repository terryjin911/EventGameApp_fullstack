{"ast":null,"code":"var _jsxFileName = \"C:\\\\TerryJin\\\\NaverCloud\\\\TerryJin\\\\EventGameApp\\\\src\\\\Info.js\";\nimport React, { useState, useCallback } from \"react\";\nimport End from \"./components/End\"; //DAY4  >   hooksfunctionapp    >   joinform.js \"nickname\"을 \"email\"로 바꿨음\n//어 input.js를 따로 만들어야하나? => End.js\n// https://hyunseob.github.io/2019/06/02/react-component-the-right-way/\n//기프티콘을 받을 수신자 이름과 연락처(번호는 좀 그래서 email로 변경)\n\nfunction SendForm() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const handleChangeName = useCallback(({\n    target: {\n      value\n    }\n  }) => {\n    setName(value);\n  }, []);\n  const handleChangeEmail = useCallback(({\n    target: {\n      value\n    }\n  }) => {\n    setEmail(value);\n  }, []); //input이 다시 렌더링되지 않게하는 함수\n\n  const handleSubmit = useCallback(() => {\n    console.log(name, email);\n  }, [name, email]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"name\",\n    placeholder: \"\\uC774\\uB984\",\n    value: name,\n    onChange: handleChangeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"\\uC774\\uBA54\\uC77C\",\n    value: email,\n    onChange: handleChangeEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"\\uC751\\uBAA8\\uD558\\uAE30\"));\n}\n\nexport default SendForm;","map":{"version":3,"sources":["C:/TerryJin/NaverCloud/TerryJin/EventGameApp/src/Info.js"],"names":["React","useState","useCallback","End","SendForm","name","setName","email","setEmail","handleChangeName","target","value","handleChangeEmail","handleSubmit","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA,OAAOC,GAAP,MAAgB,kBAAhB,C,CACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAAoB;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMQ,gBAAgB,GAAGP,WAAW,CAAC,CAAC;AAAEQ,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,KAA2B;AAC9DL,IAAAA,OAAO,CAACK,KAAD,CAAP;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMC,iBAAiB,GAAGV,WAAW,CAAC,CAAC;AAAEQ,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,KAA2B;AAC/DH,IAAAA,QAAQ,CAACG,KAAD,CAAR;AACD,GAFoC,EAElC,EAFkC,CAArC,CARkB,CAYlB;;AACA,QAAME,YAAY,GAAGX,WAAW,CAAC,MAAM;AACrCY,IAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ,EAAkBE,KAAlB;AACD,GAF+B,EAE7B,CAACF,IAAD,EAAOE,KAAP,CAF6B,CAAhC;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEM,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,cAFd;AAGE,IAAA,KAAK,EAAER,IAHT;AAIE,IAAA,QAAQ,EAAEI,gBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eASE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,WAAW,EAAC,oBAFd;AAGE,IAAA,KAAK,EAAEF,KAHT;AAIE,IAAA,QAAQ,EAAEK,iBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAeE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAfF,CADF;AAmBD;;AAED,eAAeR,QAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\n\r\nimport End from \"./components/End\";\r\n//DAY4  >   hooksfunctionapp    >   joinform.js \"nickname\"을 \"email\"로 바꿨음\r\n//어 input.js를 따로 만들어야하나? => End.js\r\n// https://hyunseob.github.io/2019/06/02/react-component-the-right-way/\r\n//기프티콘을 받을 수신자 이름과 연락처(번호는 좀 그래서 email로 변경)\r\nfunction SendForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const handleChangeName = useCallback(({ target: { value } }) => {\r\n    setName(value);\r\n  }, []);\r\n\r\n  const handleChangeEmail = useCallback(({ target: { value } }) => {\r\n    setEmail(value);\r\n  }, []);\r\n\r\n  //input이 다시 렌더링되지 않게하는 함수\r\n  const handleSubmit = useCallback(() => {\r\n    console.log(name, email);\r\n  }, [name, email]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* <input type=\"name\" placeholder=\"이름\" value={name} onChange={(target:{value})=> setName(value)} />\r\n          <input type=\"email\" placeholder=\"이메일\" value={email} onChange={(target: {value}) => setEmail(value)} /> */}\r\n      <input\r\n        type=\"name\"\r\n        placeholder=\"이름\"\r\n        value={name}\r\n        onChange={handleChangeName}\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        placeholder=\"이메일\"\r\n        value={email}\r\n        onChange={handleChangeEmail}\r\n      />\r\n      <button type=\"submit\">응모하기</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SendForm;\r\n"]},"metadata":{},"sourceType":"module"}